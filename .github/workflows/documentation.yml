name: Documentation Quality Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  markdown-lint:
    runs-on: ubuntu-latest
    name: Markdown Linting
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install markdownlint-cli
      run: npm install -g markdownlint-cli
      
    - name: Run markdownlint
      run: markdownlint "**/*.md" --ignore node_modules --ignore .github || true
      
  link-checker:
    runs-on: ubuntu-latest
    name: Link Validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install markdown-link-check
      run: npm install -g markdown-link-check
      
    - name: Check links in documentation
      run: |
        find . -name "*.md" -not -path "./node_modules/*" -not -path "./.github/*" | \
        xargs -I {} markdown-link-check {} --config .github/workflows/link-check-config.json || true
        
  powershell-syntax:
    runs-on: windows-latest
    name: PowerShell Syntax Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test PowerShell Scripts
      shell: powershell
      run: |
        $scripts = Get-ChildItem -Path "scripts" -Filter "*.ps1" -Recurse
        $errors = @()
        
        foreach ($script in $scripts) {
          Write-Host "Checking $($script.FullName)"
          try {
            $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content $script.FullName -Raw), [ref]$null)
            Write-Host "OK $($script.Name) - Syntax OK" -ForegroundColor Green
          }
          catch {
            $errors += "$($script.Name): $($_.Exception.Message)"
            Write-Host "ERROR $($script.Name) - Syntax Error: $($_.Exception.Message)" -ForegroundColor Red
          }
        }
        
        if ($errors.Count -gt 0) {
          Write-Host "PowerShell syntax errors found:" -ForegroundColor Red
          $errors | ForEach-Object { Write-Host "  $_" -ForegroundColor Red }
        } else {
          Write-Host "All PowerShell scripts passed syntax check" -ForegroundColor Green
        }
        
  json-validation:
    runs-on: ubuntu-latest
    name: JSON Validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate JSON files
      run: |
        find . -name "*.json" -not -path "./node_modules/*" -not -path "./.github/*" | while read file; do
          echo "Validating $file"
          if ! python -m json.tool "$file" > /dev/null 2>&1; then
            echo "❌ Invalid JSON: $file"
            exit 1
          else
            echo "✅ Valid JSON: $file"
          fi
        done
        
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      run: |
        echo "Scanning for sensitive information..."
        
        # Check for potential credentials or sensitive data
        if grep -r -i -E "(password|secret|key|token|credential)" --include="*.md" --include="*.ps1" --include="*.json" . | grep -v -E "(example|placeholder|<|template|USERNAME|PASSWORD|VCENTER_SERVER|KMS_USERNAME|KMS_PASSWORD)"; then
          echo "⚠️ Potential sensitive information found, but may be placeholders"
        else
          echo "✅ No sensitive information detected."
        fi
        
        # Check for personal information
        if grep -r -E "(example|placeholder)" --include="*.md" --include="*.ps1" --include="*.json" . | grep -v -E "(example|placeholder|template|author|contributor|Documents|GitHub)"; then
          echo "⚠️ Personal information found, but may be in paths"
        else
          echo "✅ No personal information detected."
        fi
        
  spell-check:
    runs-on: ubuntu-latest
    name: Spell Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install aspell
      run: sudo apt-get install -y aspell aspell-en
      
    - name: Create custom dictionary
      run: |
        cat > .aspell.en.pws << 'EOF'
        personal_ws-1.1 en 100
        vSAN
        VMware
        vSphere
        vCenter
        ESXi
        PowerCLI
        HCL
        SSD
        NVMe
        RAID
        FTT
        IOPS
        MTU
        VLAN
        KMS
        RBAC
        API
        JSON
        PowerShell
        GitHub
        README
        wiki
        datastore
        vmkernel
        multicast
        deduplication
        encryption
        stretched
        witness
        failover
        vMotion
        VMFS
        VMDK
        VM
        VMs
        CPU
        GB
        TB
        GbE
        Mbps
        Gbps
        IPv4
        IPv6
        DNS
        NTP
        LDAP
        SSL
        TLS
        HTTPS
        URL
        URLs
        CLI
        GUI
        UI
        UX
        EOF
        
    - name: Spell check documentation
      run: |
        find . -name "*.md" -not -path "./node_modules/*" -not -path "./.github/*" | while read file; do
          echo "Spell checking $file"
          aspell --personal=./.aspell.en.pws --lang=en --mode=markdown list < "$file" | head -10 || true
        done